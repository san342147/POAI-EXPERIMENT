N = 8

def print_solution(board):
    print("One of the possible solutions is:")
    for i in range(N):
        for j in range(N):
            print("Q" if board[i][j] else ".", end=" ")
        print()

def is_safe(board, row, col):
    # Check this column on upper side
    for i in range(row):
        if board[i][col]:
            return False

    # Check upper-left diagonal
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j]:
            return False

    # Check upper-right diagonal
    for i, j in zip(range(row, -1, -1), range(col, N)):
        if board[i][j]:
            return False

    return True

def solve_n_queens(board, row):
    if row >= N:
        print_solution(board)
        return True  # stop after finding one solution

    for col in range(N):
        if is_safe(board, row, col):
            board[row][col] = 1
            if solve_n_queens(board, row + 1):
                return True
            board[row][col] = 0  # backtrack
    return False

# Initialize board
board = [[0 for _ in range(N)] for _ in range(N)]

# Start solving
solve_n_queens(board, 0)
